/*
ID: toooooEasy or RafaelSaddatimov
PROG:
*/
#include <bits/stdc++.h>
//#pragma GCC optimize("O3")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define MAX 100009
#define MAXN 1000009
#define LOGMAX 30
#define SQMAX 1400
#define SZ (MAX / SQMAX + 1)
#define MOD 1000000007
#define INF 2000000009
#define EPS 1e-9
#define ll long long
#define F first
#define S second
#define all(a) a.begin(), a.end()
#define pb push_back
#define io ios_base::sync_with_stdio(false); cin.tie(0)
using namespace std;
int newLine() {
    puts("");
}
void fastIn(int &x) {
    x = 0;
    char c = getchar();
    while(c < '0' || c > '9')
        c = getchar();
    x = c - '0';
    c = getchar();
    while(c >= '0' && c <= '9') {
        x = x * 10 + (c - '0');
        c = getchar();
    }
}
int fastOut(int x) {
    if(x == 0)
        return 0 * puts("0");
    vector<char> a;
    while(x) {
        a.pb(char(x % 10 + '0'));
        x /= 10;
    }
    for(int i=a.size()-1; i>=0; --i)
        putchar(a[i]);
    newLine();
}
 
struct node {
    int l, r, val;
} T[2 * LOGMAX * MAX];
int arr[MAX];
int root[MAX];
vector<int> g[MAX];
int euler[MAX];
int tin[MAX];
int tout[MAX];
int tmer = 1;
int R = 1000000000;
int id = 0, nxt = 0;
 
void dfs(int v, int p = -1) {
    tin[v] = tmer;
    euler[tmer++] = arr[v];
    int to;
    for(int i=0; i<g[v].size(); ++i) {
        to = g[v][i];
        if(to != p)
            dfs(to, v);
    }
    tout[v] = tmer - 1;
}
void modify(int &v, int par, int l, int r, int pos, int val) {
    v = ++nxt;
    T[v] = T[par];
    if (l == r) {
        T[v].val += val;
        T[v].l = T[v].r = 0;
        return;
    }
    int mid = (l + r) >> 1;
    if (pos <= mid) modify(T[v].l, T[par].l, l, mid, pos, val);
    else modify(T[v].r, T[par].r, mid + 1, r, pos, val);
    T[v].val = T[T[v].l].val + T[T[v].r].val;
}
int query(int lv, int rv, int vl, int vr, int k) {
    if(vl == vr) return vl;
    int vm = (vl + vr) >> 1;
    int cnt = T[T[rv].l].val - T[T[lv].l].val;
    if(cnt >= k) return query(T[lv].l, T[rv].l, vl, vm, k);
    else return query(T[lv].r, T[rv].r, vm + 1, vr, k - cnt);
}
map<int, int> mp;
int main() {
    int n;
    fastIn(n);
    for(int i=1; i<=n; ++i) {
        fastIn(arr[i]);
        mp[arr[i]] = i;
    }
    for(int i=1; i<n; ++i) {
        int u, v;
        fastIn(u);
        fastIn(v);
        g[u].pb(v);
        g[v].pb(u);
    }
    dfs(1);
    modify(root[1], 0, 1, R, euler[1], 1);
    for(int i=2; i<=n; ++i)
        modify(root[i], root[i - 1], 1, R, euler[i], 1);
    int q;
    fastIn(q);
    while(q--) {
        int x, k;
        fastIn(x);
        fastIn(k);
        fastOut(mp[query(root[tin[x] - 1], root[tout[x]], 1, R, k)]);
    }
}
